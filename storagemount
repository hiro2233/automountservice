#!/bin/bash

usage()
{
    echo "Usage: $0 {add|remove} device_name (e.g. sdb1)"
    exit 1
}

if [[ $# -ne 2 ]]; then
    usage
fi

ACTION=$1
DEVBASE=$2
DEVICE="/dev/${DEVBASE}"

# See if this drive is already mounted, and if so where
MOUNT_POINT=$(/bin/mount | /bin/grep -w ${DEVICE} | /usr/bin/awk '{ print $3 }' | head -1)

strstr() {
  [ "${1#*$2*}" != "$1" ]
}

check_forced_unmount()
{
    BLK=$(lsblk -r -o NAME,MOUNTPOINT ${DEVICE} 2>/dev/null | tail -n+2 | awk '{ print $2 }' | xargs printf "%s")
    MNT=$(/bin/mount | /bin/grep ${DEVICE} | /usr/bin/awk '{ print $3 }' | head -1 | xargs printf "%s")

    printf "INFO: [BLK=%s] [MNT=%s] [DEVICE=%s] [eq=%d]\n" "${BLK}x" "${MNT}x" "${DEVICE}x" $(strstr "$MNT" "$BLK"; echo "$?")
    if [ $(strstr "$MNT" "$BLK"; echo "$?") -eq 1 ] ; then
        printf "%s\n" "not equal"
        do_unmount ${DEVICE}
        sync
    fi
}

do_mount()
{
    if [[ -n ${MOUNT_POINT} ]]; then
        printf "%s\n" "WARNING: ${DEVICE} is already mounted at ${MOUNT_POINT}"
        check_forced_unmount
        return 0
    fi

    # Get info for this drive: $ID_FS_LABEL, $ID_FS_UUID, and $ID_FS_TYPE
    eval $(/sbin/blkid -o udev ${DEVICE})

    if [ "x$ID_FS_TYPE" = "x" ] ; then
        printf "%s\n" "device ${DEVICE} unknown format!"
        return 0
    fi

    # Figure out a mount point to use
    LABEL=${ID_FS_LABEL}

    if [[ -z "${LABEL}" ]]; then
       LABEL=${ID_FS_PARTLABEL}
    fi

    if [[ -z "${LABEL}" ]]; then
        LABEL=${DEVBASE}
    elif /bin/grep -q " /media/${LABEL} " /etc/mtab; then
        # Already in use, make a unique one
        LABEL+="-${DEVBASE}"
    fi
    MOUNT_POINT="/media/${LABEL}"

    echo "Mount point: ${MOUNT_POINT}"

    /bin/mkdir -p ${MOUNT_POINT}

    # Global mount options
    OPTS="rw,relatime"

    # File system type specific mount options
    if [[ ${ID_FS_TYPE} == "exfat" ]] || [[ ${ID_FS_TYPE} == "ntfs" ]]; then
        OPTS="defaults,uid=1000,gid=1000"
    fi

    if [[ ${ID_FS_TYPE} == "vfat" ]]; then
        OPTS+=",users,gid=100,umask=000,shortname=mixed,utf8=1,flush"
    fi

    if ! /bin/mount -o ${OPTS} ${DEVICE} ${MOUNT_POINT}; then
        echo "Error mounting ${DEVICE} (status = $?)"
        /bin/rmdir ${MOUNT_POINT}
        return 0
    fi

    # Mount on public path if nas_public flag is present.
    if [ -e ${MOUNT_POINT}/nas_public.flag ] ; then
    	do_unmount ${DEVICE}
        unset MOUNT_POINT
        MOUNT_POINT="/media/public/${LABEL}"
        mkdir -p ${MOUNT_POINT}
        if ! /bin/mount -o ${OPTS} ${DEVICE} ${MOUNT_POINT}; then
            echo "Error mounting ${DEVICE} (status = $?)"
            /bin/rmdir ${MOUNT_POINT}
            return 0
        fi
    fi

    echo "**** Mounted ${DEVICE} at ${MOUNT_POINT} ****"
}

do_unmount()
{
    if [[ -z ${MOUNT_POINT} ]]; then
        echo "Warning: ${DEVICE} is not mounted"
        return 0
    else
        /bin/umount -l ${DEVICE}
        echo "**** Unmounted ${DEVICE}"
    fi

    # Delete all empty dirs in /media that aren't being used as mount
    # points. This is kind of overkill, but if the drive was unmounted
    # prior to removal we no longer know its mount point, and we don't
    # want to leave it orphaned...
    MEDIA=$(/usr/bin/find /media/* -maxdepth 0 -type d)
    for f in ${MEDIA} ; do
        if [[ -n $(/usr/bin/find "$f" -maxdepth 0 -type d -empty 2>/dev/null) ]]; then
            if ! /bin/grep -q " $f " /etc/mtab; then
                echo "**** Removing mount point $f"
                /bin/rmdir "$f"
            fi
        fi
    done
}

case "${ACTION}" in
    add)
        do_mount
        ;;
    remove)
        do_unmount
        ;;
    *)
        usage
        ;;
esac
